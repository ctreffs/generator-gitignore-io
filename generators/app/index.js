'use strict'
const Generator = require('yeoman-generator')
const chalk = require('chalk')
const yosay = require('yosay')
const FuzzySearch = require('fuzzy-search')
const Promise = require('bluebird')
const Please = require('request-promise')
const Request = require('request')
const Fs = require('fs')
const Spinner = require('cli-spinner').Spinner

module.exports = class extends Generator {
  prompting () {
    this.env.adapter.promptModule.registerPrompt('checkbox-plus', require('inquirer-checkbox-plus-prompt'))
    this.log(
      yosay(`Welcome to the ${chalk.yellow('gitignore-io')} generator! [${chalk.blue('generator-gitignore-io')}]`)
    )

    const spinner = new Spinner(`We'll try and get ${chalk.yellow('gitignore')} info from ${chalk.red('https://gitignore.io')}: %s`)
    spinner.setSpinnerString('◐◓◑◒')
    // spinner.setSpinnerString('|/-\\')
    spinner.start()
    const gi = Please({
      uri: 'https://gitignore.io/api/list',
      headers: {
        'User-Agent': 'Request-Promise'
      }
    }).then(gi => {
      return gi
    }).catch(err => {
      spinner.stop(true)
      this.log(`We failed to get the most up-to-date ${chalk.yellow('gitignore')} info. We'll use some cached data instead.`)
      return require('./gitignore.csv')
    })

    return gi.then(gi => {
      spinner.stop(true)

      const options = gi
        .split('\n')
        .map(line => line.split(','))
        .reduce((acc, it) => acc.concat(it), [])

      const prompts = [
      ]

      prompts.push({
        type: 'checkbox-plus',
        name: 'options',
        message: answers => {
          return `Check any and all ${chalk.yellow('options')} you want to include; start typing to narrow down the list.`
        },
        default: answers => {
          return this.config.get('options') || []
        },
        when: answers => {
          return true
        },
        validate: answer => {
          if (answer.length === 0) {
            return `You should specify ${chalk.red('at least one')} option!`
          } else {
            return true
          }
        },
        highlight: true,
        searchable: true,
        source: (answers, filter) => new Promise(resolve => resolve(new FuzzySearch(options).search(filter)))
      })

      return this.prompt(prompts).then(props => {
        // To access props later use this.props.someAnswer;
        this.props = props
        Object.entries(props).forEach(entry => {
          this.config.set(entry[0], entry[1])
        })
      })
    })
  }

  writing () {
    const spinner = new Spinner(`We'll now download your gitignore as generated by ${chalk.yellow('gitignore.io')}: %s`)
    spinner.setSpinnerString('◐◓◑◒')
    // spinner.setSpinnerString('|/-\\')
    spinner.start()

    Request({
      uri: `https://gitignore.io/api/${this.props.options.reduce((acc, it) => acc.concat(it, ','), '').slice(0, -1)}`,
      headers: {
        'User-Agent': 'Request-Promise'
      }
    })
    .on('error', err => {
      spinner.stop(true)
      this.log(yosay(`We're terribly sorry but we couldn't get your gitignore file from ${chalk.red('https://gitignore.io')}: ${err}`))
      this.log(`${chalk.red(err)}`)
    })
    .pipe(Fs.createWriteStream('.gitignore'))
    .on('close', () => {
      spinner.stop(true)
      this.log(`Downloaded ${chalk.yellow('.gitignore')}.`)
      this.log(yosay(`Thank you for using the ${chalk.yellow('gitignore-io')} generator! [${chalk.blue('generator-gitignore-io')}]`))
    })
  }

  install () {
  }
}
